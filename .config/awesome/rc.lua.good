-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
-- luke
  -- revelation , fenêtre en mosaïque , key modkey,e
  require("revelation")
  -- urxvt en float: to ! [Mod1 C]
  require("teardrop")
  require("vicious")
  require("orglendar")
-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.add_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}
-- {{{ Variable definitions

-- This is used later as the default terminal and editor to run.
terminal = "urxvt"
editor = os.getenv("EDITOR") or "vim"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod1"

  local home   = os.getenv("HOME")
  local exec   = awful.util.spawn
  local sexec  = awful.util.spawn_with_shell
  local scount = screen.count()

-- Themes define colours, icons, and wallpapers
  beautiful.init(home .. "/.config/awesome/zenburn.lua")
-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.tile,                 -- 1
    --awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,          -- 2
    --awful.layout.suit.tile.top,
    awful.layout.suit.fair,                 -- 3
    --awful.layout.suit.fair.horizontal,
    --awful.layout.suit.spiral,
    --awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,                  -- 4
    --awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier,            -- 5
    awful.layout.suit.floating             -- 6 sans la virgule à la fin, bordel!
}
-- }}}
-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags =  {
   --names = { "♻", "⌥", "♆", "☢", "❆", "✪", "✣", "✜", "❖"},
   names = { "—urxvt—", "2·web", "3·♆", "4·☢", "5·❆", "6·zik", "7·✣", "8·✜", "9·❖"},
   layout = { layouts[1], layouts[1], layouts[3], layouts[1], layouts[1], layouts[1], layouts[1], layouts[4], layouts[6] }
        }
   for s = 1, screen.count() do
     -- each screen has its own tag table.
     tags[s] = awful.tag(tags.names, s, tags.layout)
   end
-- }}}
-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

 
myevilmenu = {
   { "Tuner Guitar", "lingot" },
   { "AlsaMixer", "urxvt -e alsamixer" },
   { "Pcmanfm", "pcmanfm" },
   { "Tor On", "toron" },
   { "Tor Off", "toroff" },
   { "Klavaro", "klavaro" },
   { "xsane", "xsane" },
   { "JDownloader", "jdownloader" },
   { "VLC", "vlc" },
}
bureautique= {
   { "Word", "/usr/bin/libreoffice --writer" },
   { "Excel", "/usr/bin/libreoffice --calc" },
   { "PowerPoint", "/usr/bin/libreoffice --impress" },
}
arret_pc= {
   { "Arrêt PC", "sudo halt" },
}
mymainmenu = awful.menu({ items = {
    { "Awesome", myawesomemenu },
    { "bureautique", bureautique },
    { "pure evil", myevilmenu },
    { "Arrêt PC" , arret_pc },
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}
-- {{{ Wibox

-- {{{ Reusable separator
separator = widget({ type = "imagebox" })
separator.image = image(beautiful.widget_sep)
-- }}}

-- {{{ CPU usage and temperature
cpuicon = widget({ type = "imagebox" })
cpuicon.image = image(beautiful.widget_cpu)
-- Initialize widgets
cpugraph  = awful.widget.graph()
tzswidget = widget({ type = "textbox" })
-- Graph properties
cpugraph:set_width(40):set_height(14)
cpugraph:set_background_color(beautiful.fg_off_widget)
cpugraph:set_gradient_angle(0):set_gradient_colors({
   beautiful.fg_end_widget, beautiful.fg_center_widget, beautiful.fg_widget
}) -- Register widgets
-- luke
-- Initialize widget
cpuwidget = widget({ type = "textbox" })
---- Register widget
--vicious.register(cpuwidget, vicious.widgets.cpu, "$1%")
--
--vicious.register(cpugraph,  vicious.widgets.cpu,      "$1")
-- vicious.register(tzswidget, vicious.widgets.thermal, " $1C", 19, "thermal_zone0")
---- {{{ CPU temperature
--local tzswidget = widget({ type = "textbox" })
--vicious.register(tzswidget, vicious.widgets.thermal, " $1°", 20, { "coretemp.0", "core"} )
-- }}}


-- {{{ Memory usage
memicon = widget({ type = "imagebox" })
memicon.image = image(beautiful.widget_mem)
-- Initialize widget
membar = awful.widget.progressbar()
-- Pogressbar properties
membar:set_vertical(true):set_ticks(true)
membar:set_height(12):set_width(8):set_ticks_size(2)
membar:set_background_color(beautiful.fg_off_widget)
membar:set_gradient_colors({ beautiful.fg_widget, beautiful.fg_center_widget, beautiful.fg_end_widget }) 
-- Register widget
vicious.register(membar, vicious.widgets.mem, "$1", 13)
-- }}}


-- {{{ File system usage
fsicon = widget({ type = "imagebox" })
fsicon.image = image(beautiful.widget_fs)
-- Initialize widgets
fs = {
  b = awful.widget.progressbar(),
  r = awful.widget.progressbar(),
  h = awful.widget.progressbar(),
  k = awful.widget.progressbar(),
  l = awful.widget.progressbar(),
}
  
-- Progressbar properties
for _, w in pairs(fs) do
  w:set_vertical(true)
  w:set_ticks(true)
  w:set_height(14)
  w:set_width(5)
  w:set_ticks_size(2)
  w:set_border_color(beautiful.border_widget)
  w:set_background_color(beautiful.fg_off_widget)
  w:set_gradient_colors({ beautiful.fg_widget,
     beautiful.fg_center_widget, beautiful.fg_end_widget
  }) 
  -- Register buttons
  w.widget:buttons(awful.util.table.join(
    --awful.button({ }, 1, function () exec("rox", false) end)
    awful.button({ }, 1, function () exec("tuxcmd", false) end)
  ))
end
-- Enable caching
vicious.cache(vicious.widgets.fs)
-- Register widgets
vicious.register(fs.b, vicious.widgets.fs, "${/boot used_p}",               599)
vicious.register(fs.r, vicious.widgets.fs, "${/ used_p}",               599)
vicious.register(fs.h, vicious.widgets.fs, "${/home used_p}",           599)
vicious.register(fs.k, vicious.widgets.fs, "${/media/sdb1 used_p}",     599)
vicious.register(fs.l, vicious.widgets.fs, "${/media/freebox used_p}",  599)
-- }}}


-- {{{ Network usage
dnicon = widget({ type = "imagebox" })
upicon = widget({ type = "imagebox" })
dnicon.image = image(beautiful.widget_net)
upicon.image = image(beautiful.widget_netup)
-- Initialize widget
netwidget = widget({ type = "textbox" })
-- Register widget
vicious.register(netwidget, vicious.widgets.net, '<span color="'
  .. beautiful.fg_netdn_widget ..'">${eth0 down_kb}</span> <span color="'
  .. beautiful.fg_netup_widget ..'">${eth0 up_kb}</span>', 3)
-- }}}


-- {{{ Org-mode agenda
orgicon = widget({ type = "imagebox" })
orgicon.image = image(beautiful.widget_org)
-- Initialize widget
orgwidget = widget({ type = "textbox" })
-- Configure widget
local orgmode = {
  files = { home.."/test.org",
    home.."/courses.org", home.."/formations_dates.org",
  },
  color = {
    past   = '<span color="'..beautiful.fg_urgent..'">',
    today  = '<span color="'..beautiful.fg_normal..'">',
    soon   = '<span color="'..beautiful.fg_widget..'">',
    future = '<span color="'..beautiful.fg_netup_widget..'">'
}} -- Register widget
vicious.register(orgwidget, vicious.widgets.org,
  orgmode.color.past..'$1</span>-'..orgmode.color.today .. '$2</span>-' ..
  orgmode.color.soon..'$3</span>-'..orgmode.color.future.. '$4</span>', 601,
  orgmode.files
) -- Register buttons
orgwidget:buttons(awful.util.table.join(
-- pour que ce qui suit marche, il faut définir dans le fichier ~/.emacs la ligne
-- (start server)
-- qui autorise emacsclient ET avoir une instance enacs en cours
-- Bref, c'est nul. Je préfère ma modif .*
  --awful.button({ }, 1, function () exec("emacsclient --eval '(org-agenda-list)'") end),
  --awful.button({ }, 3, function () exec("emacsclient --eval '(make-remember-frame)'") end)
  awful.button({ }, 1, function () exec("urxvt -e gvim /home/luke/test.org -s /home/luke/orgmode_caa") end),
  awful.button({ }, 3, function () exec("urxvt -e gvim /home/luke/test.org -s /home/luke/orgmode_caL") end)

))
-- }}}


-- {{{ Volume level
volicon = widget({ type = "imagebox" })
volicon.image = image(beautiful.widget_vol)
-- Initialize widgets
volbar    = awful.widget.progressbar()
volwidget = widget({ type = "textbox" })
-- Progressbar properties
volbar:set_vertical(true):set_ticks(true)
volbar:set_height(12):set_width(8):set_ticks_size(2)
volbar:set_background_color(beautiful.fg_off_widget)
volbar:set_gradient_colors({ beautiful.fg_widget,
   beautiful.fg_center_widget, beautiful.fg_end_widget
}) -- Enable caching
vicious.cache(vicious.widgets.volume)
-- Register widgets
vicious.register(volbar,    vicious.widgets.volume,  "$1",  2, "Master")
vicious.register(volwidget, vicious.widgets.volume, " $1%", 2, "Master")
-- Register buttons
volbar.widget:buttons(awful.util.table.join(
   awful.button({ }, 1, function () exec("urxvt -e alsamixer") end),
   awful.button({ }, 3, function () exec("amixer sset Master toggle") end),
   awful.button({ }, 4, function () exec("amixer -q set Master 2dB+", false) end),
   awful.button({ }, 5, function () exec("amixer -q set Master 2dB-", false) end)
)) -- Register assigned buttons
volwidget:buttons(volbar.widget:buttons())
-- }}}


-- {{{ Date and time
---- localiser affichage date
os.setlocale("fr_FR.UTF-8", "time")

dateicon = widget({ type = "imagebox" })
dateicon.image = image(beautiful.widget_date)
-- Initialize widget
datewidget = widget({ type = "textbox" })
-- Register widget
vicious.register(datewidget, vicious.widgets.date, "%d %b %R", 61)
-- Register buttons
datewidget:buttons(awful.util.table.join(
  awful.button({ }, 1, function () exec("pylendar.py") end)
))



---- orglendar
--datewidget = awful.widget.textclock({ align = "right" })
--orglendar.files = { "/home/luke/test.org" }
--orglendar.register(datewidget)
--


-- }}}
-- }}}
-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" })

-- Create a systray
mysystray = widget({ type = "systray" })

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s],
            mylayoutbox[s], -- move it!
            mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        separator, datewidget, dateicon,
        --mytextclock,
        s == 1 and mysystray or nil,
        separator, volwidget,  volbar.widget, volicon,                                      -- volume audio
        separator, orgwidget,  orgicon,                                                     -- orglendar
        separator, upicon,     netwidget, dnicon,                                           -- net
        separator, fs.l.widget, fs.k.widget, fs.h.widget, fs.r.widget, fs.b.widget, fsicon, -- hd
        separator, membar.widget, memicon,                                                  -- mem
        separator, tzswidget, cpugraph.widget, cpuwidget, cpuicon,                          -- cpu
        separator, mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end
-- }}}
-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}
-- {{{ Key bindings
    --{{{ globalkeys
globalkeys = awful.util.table.join(
  awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
  awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
  awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

  awful.key({ modkey,           }, "t",
    function ()
      awful.client.focus.byidx( 1)
      if client.focus then client.focus:raise() end
    end),
  awful.key({ modkey,           }, "s",
    function ()
      awful.client.focus.byidx(-1)
      if client.focus then client.focus:raise() end
    end),
  awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

    -- {{{ Layout manipulation
    awful.key({ modkey, "Shift"   }, "t", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "s", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "t", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "s", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),
    --}}}
    -- {{{ Standard program
    -- {{{{ Add-on luke
    -- dmenu
    awful.key({ modkey, "Alt"},            "F2",     function ()
    awful.util.spawn("dmenu_run -i -p 'Run command:' -fn '-*-profont-*-*-normal-*-11-*-*-*-*-*-iso8859-*' -nb '" .. 
        beautiful.bg_normal .. "' -nf '" .. beautiful.fg_normal .. 
        "' -sb '" .. beautiful.bg_focus .. 
        "' -sf '" .. beautiful.fg_focus .. "'") 
    end),

    -- printcreens par la «touche Impr écran»
    -- xev sur cette touche donne Print. c'est le nom de cette touche
    awful.key({ }, "Print", function () awful.util.spawn("scrot -e 'mv $f ~/screenshots/ 2>/dev/null'") end),

    -- list all fenêtres même minimizées
    awful.key({ modkey,      }, "z",
      function ()
        awful.menu.menu_keys.down = { "Down", "Alt_L" }
        local cmenu = awful.menu.clients({width=500}, {keygrabber=true, coords={x=0, y=10}})
      end), 

    -- luke toggle wibox visibility
    awful.key({ modkey }, "b",
      function ()
        mywibox[mouse.screen].visible = not mywibox[mouse.screen].visible
      end),

    -- luke revelation, fenêtre en mosaïque
    awful.key({ modkey }, "e",  revelation.revelation),

    -- luke add application switcher
    awful.key({ modkey }, "Escape",
      function ()
        -- If you want to always position the menu on the same place set coordinates
        awful.menu.menu_keys.down = { "Down", "Alt_L" }
        local cmenu = awful.menu.clients({width=245}, { keygrabber=true, coords={x=525, y=330} })
      end),

    -- soft & fonctions
    awful.key({ modkey }, "d", function () awful.util.spawn("dwb") end),
    awful.key({ modkey,"Control"}, "f", function () awful.util.spawn("firefox -P default") end),
    awful.key({ modkey,"Control"}, "v", function () awful.util.spawn("vlc") end),
    awful.key({ modkey,"Control"}, "n", function () awful.util.spawn("urxvt -e ncmpcpp") end),
    awful.key({ modkey,}, "F11", function () awful.util.spawn("sudo halt") end),
    -- indispensable
    awful.key({ modkey },"x", function () teardrop("urxvt", "bottom", "center", 0.95, 0.4, false) end),
    --}}}

    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "h", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "r",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "c",     function () awful.tag.incmwfact(-0.05)    end),
    --
    awful.key({ modkey, "Shift"   }, "c",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "r",     function () awful.tag.incnmaster(-1)      end),
    --
    awful.key({ modkey, "Control" }, "c",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "r",     function () awful.tag.incncol(-1)         end),
    --
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore), -- minimize windows

    -- {{{ Prompt
    -- Run
    awful.key({ modkey },            "F1",     function () mypromptbox[mouse.screen]:run() end),
    -- Run in terminal
    awful.key({ modkey, "Shift"   }, "F1",
      function ()
        awful.prompt.run({ prompt = "Run in terminal: " },
        mypromptbox[mouse.screen].widget,
      function (...) awful.util.spawn(terminal .. " -e " .. ...) end,
        awful.completion.shell,
        awful.util.getdir("cache") .. "/history")
      end),
    -- Run lua code
    awful.key({ modkey }, "F4",
      function ()
        awful.prompt.run({ prompt = "Run Lua code: " },
        mypromptbox[mouse.screen].widget,
        awful.util.eval, nil,
        awful.util.getdir("cache") .. "/history_eval")
      end)
      --}}}
      --}}}
) -- end globalkeys
    --}}}
    --{{{ clientkeys
clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "x",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "h",      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",
      function (c)
        -- The client currently has the input focus, so it cannot be
        -- minimized, since minimized clients can't have the focus.
        c.minimized = true
      end),
    awful.key({ modkey,           }, "m",
      function (c)
        c.maximized_horizontal = not c.maximized_horizontal
        c.maximized_vertical   = not c.maximized_vertical
      end)
)
    --}}}
    -- {{{ keynumber
-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))
    --}}}
--{{{ Set keys
root.keys(globalkeys)
--}}}
-- }}}
-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    { rule = { class = "vlc" },
      properties = { floating = true } },
    { rule = { class = "klavaro" },
      properties = { floating = true } },
    -- Set Firefox to always map on tags number 2 of screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { tag = tags[1][2] } },
}
-- }}}
-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)
    -- client placement
    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

-- {{{ Focus signal handlers with transparancy (xcompgmr)
-- before
  --client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
  --client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
client.add_signal("focus",
  function (c) 
  c.border_color = beautiful.border_focus c.opacity = 1
  end)
client.add_signal("unfocus",
  function (c) 
    c.border_color = beautiful.border_normal c.opacity = 0.7
  end)
-- }}}
-- }}}
